name: Deploy Production

on:
  push:
    branches:
      - production
  workflow_dispatch:

concurrency:
  group: production-deploy
  cancel-in-progress: false

env:
  PYTHON_VERSION: "3.11"
  DEFAULT_APP_PATH: /opt/user_bot
  GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/user_bot:latest

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Run tests
        run: |
          set -e
          pytest || {
            exit_code=$?
            if [ "$exit_code" -eq 5 ]; then
              echo "pytest exited with code 5 (no tests collected) â€“ treating as success."
            else
              exit "$exit_code"
            fi
          }

  build-image:
    name: Build & Publish Image
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.GHCR_IMAGE }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs:
      - build-and-test
      - build-image
    if: github.ref == 'refs/heads/production'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            APP_PATH="${{ secrets.VPS_APP_PATH }}"
            if [ -z "$APP_PATH" ]; then
              APP_PATH="${{ secrets.PROD_APP_PATH }}"
            fi
            if [ -z "$APP_PATH" ]; then
              APP_PATH="${{ env.DEFAULT_APP_PATH }}"
            fi
            export APP_PATH

            USER_BOT_GHCR_PAT="${{ secrets.GHCR_PAT }}"
            if [ -n "$USER_BOT_GHCR_PAT" ]; then
              export USER_BOT_GHCR_PAT
              export USER_BOT_GHCR_USER="${{ github.repository_owner }}"
            fi

            USER_BOT_IMAGE_VALUE="${{ secrets.VPS_IMAGE }}"
            if [ -z "$USER_BOT_IMAGE_VALUE" ]; then
              USER_BOT_IMAGE_VALUE="${{ secrets.PROD_IMAGE }}"
            fi
            if [ -z "$USER_BOT_IMAGE_VALUE" ] && [ -n "${GHCR_IMAGE:-}" ]; then
              USER_BOT_IMAGE_VALUE="$GHCR_IMAGE"
            fi
            if [ -n "$USER_BOT_IMAGE_VALUE" ]; then
              export USER_BOT_IMAGE="$USER_BOT_IMAGE_VALUE"
            fi

            bash -euo pipefail -c '
              cd "$APP_PATH"
              git fetch --prune origin production
              git checkout -B production origin/production
              chmod +x deploy.sh
              ./deploy.sh
            '
